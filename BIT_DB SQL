# How many customers ordered more than two products at a time, and what the average amount spent for those customers
select
count(distinct cust.acctnum),
avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid)=6
AND orderid<> 'Order ID'

#1 Which locations in New York received at least 3 orders in January, and how many orders did they receive each?
SELECT distinct location, count(orderID)
FROM BIT_DB.JanSales
WHERE location like '%NY%'
AND length(orderID) = 6
and orderID <> 'Order ID'
GROUP BY location
HAVING count(orderID)>2

#2 How many of each type of headphones was sold in February?
SELECT SUM(Quantity) as quantity,
Product
FROM BIT_DB.FebSales
WHERE Product like '%Headphones%'
GROUP BY Product

#4 What was the average quantity of products purchased per account in February?
SELECT SUM(quantity*price)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON Feb.orderID=cust.order_id
WHERE length(orderid)=6
AND orderid<> 'Order ID'

#4 What was the average quantity of products perchased per account in February?
LEFT JOIN BIT_DB.customers cust
ON Feb.orderID=cust.order_id
WHERE length(orderid)=6
AND orderid<> 'Order ID'

#5 Which product brought in the most revenue in January and how much total revenue did it bring in total?
SELECT Product,
sum(quantity*price)
FROM BIT_DB.JanSales
GROUP BY Product
ORDER BY sum(quantity*price) desc
LIMIT 1

#6 used CTE to show the average popularity of an artist
WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM Spotifydata s
GROUP BY s.artist_name
)

SELECT artist_name,
       average_popularity,
       'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90

#7 Thesea are bikes that are road worthy
WITH safety_average_cte AS (
SELECT street, AVG(safetyrating) as 'rating'
FROM CityBikeLanes
GROUP BY street
)

SELECT
street,
rating,
'safe lane' as 'label'
FROM safety_average_cte
where rating>=4

#8 Using the window function to show average safety rating and recommending if the lanes need improvements
SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating",
CASE WHEN AVG(safetyrating) OVER (PARTITION BY safetyrating)>=4 THEN "Leave As-Is"
  WHEN AVG(safetyrating) OVER (PARTITION BY safetyrating) <2.5 THEN "Remove"
  ELSE "Improvements Needed"
  END AS "Recommendation"
FROM CityBikeLanes
